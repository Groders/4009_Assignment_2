Comparison of parallel sequential mergesort, and the improved mergesort.


I ran these tests on my home computer which has a 4 core i7 26000 and with 8BG of ram
given to the vm. My times are probably slower due to the age of my CPU.
BaseCase was set to 5.

n		Parallel Time	Sequential Time	Memory Efficient MergeSort
2000000		0.779713	1.01022			0.489695
4000000		1.61874		2.12877			0.999152		
8000000		3.66651		4.03155			1.98255	
10000000	4.20154		5.59608			2.91787
11000000	5.3785		5.38767			3.100003
12000000	5.92607		6.11139			3.43174
15000000	6.48105		8.30994			4.29987
17000000	6.8599		9.46857			4.36824
20000000	8.66931		10.8626			5.93719
23000000	10.1695		12.1042			7.35917			


In q1/q2 in P_MergeSort the malloc call allocate log(n)*n memory. This is becasue
there are log(n) level of MergeSort() being called and each time it is called it 
allocats size amount of memory. But there are n/size branchs at that same level allocating
that much memory. 


Cleary the Memory Efficient MergeSort is more efficient as it should be since it doesn't have 
to spend time allocating memory at each level of recursion. The speed up is definitly more in 
line with what we'd expect but it is still not the most optimal it could be. A bigger base case
would definitly help as spawning cilk processes is not the fastest/efficient thing to do, especially 
once array sizes get smaller than say 10. 
